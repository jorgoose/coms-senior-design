name: Deploy Lambda Functions

on:
  push:
    branches:
      - main
    paths:
      - 'lambdas/**'

jobs:
  get-filenames:
    runs-on: ubuntu-latest
    outputs:
      lambdaArray: ${{ steps.getLambdas.outputs.lambdas }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Get functions filenames
        id: getLambdas
        run: |
          lambdas=$(tree -d -L 1 -J ./lambdas | jq -j -c '.[0].contents | map(.name)')
          echo ::set-output name=lambdas::${lambdas}

  update-code:
    needs: get-filenames
    strategy:
      matrix:
        lambda: ${{ fromJSON(needs.get-filenames.outputs.lambdaArray) }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: Get AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2
      - name: Delete removed Lambdas
        run: |
          for lambda in $(aws lambda list-functions --query 'Functions[*].[FunctionName]' --output text); do
            if [[ ! -d "./lambdas/${lambda}" ]]; then
              aws lambda delete-function --function-name ${lambda}
            fi
          done
      - name: Determine runtime and handler
        id: runtime_handler
        run: |
          if [ -f "./lambdas/${{ matrix.lambda }}/index.js" ]; then
            echo "::set-output name=runtime::nodejs16.x"
            echo "::set-output name=handler::index.handler"
            echo "::set-output name=zip_file::./lambdas/${{ matrix.lambda }}/index.js"
          elif [ -f "./lambdas/${{ matrix.lambda }}/lambda_function.py" ]; then
            echo "::set-output name=runtime::python3.9"
            echo "::set-output name=handler::lambda_function.lambda_handler"
            echo "::set-output name=zip_file::./lambdas/${{ matrix.lambda }}/lambda_function.py"
          else
            echo "No supported lambda handler found"
            exit 1
          fi
      - name: Zip Lambda function
        run: zip -j ${{ matrix.lambda }}.zip ${{ steps.runtime_handler.outputs.zip_file }}
      - name: Check if Lambda exists
        id: check_lambda
        run: |
          if aws lambda get-function --function-name ${{ matrix.lambda }}; then
            echo "::set-output name=exists::true"
          else
            echo "::set-output name=exists::false"
          fi
      - name: Create new Lambda function
        if: steps.check_lambda.outputs.exists == 'false'
        run: |
          aws lambda create-function \
            --function-name ${{ matrix.lambda }} \
            --runtime ${{ steps.runtime_handler.outputs.runtime }} \
            --role arn:aws:iam::652182311257:role/GitHubActionLambda \
            --handler ${{ steps.runtime_handler.outputs.handler }} \
            --zip-file fileb://${{ matrix.lambda }}.zip
      - name: Update Lambdas code
        if: steps.check_lambda.outputs.exists == 'true'
        run: aws lambda update-function-code --function-name=${{ matrix.lambda }} --zip-file=fileb://${{ matrix.lambda }}.zip
